#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/shadow/static.official.stable.yaml
_disabled: false

pkg: "shadow"
pkg_id: "nixpkgs.shadow"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description:
  _default: "Authentication-related Utilities tools for managing accounts and shadow files [alias=shadow-utils]"
  chage: "Change user password expiry information [shadow]"
  chfn: "Change real user name and information [shadow]"
  chgpasswd: "Update group passwords in batch mode [shadow]"
  chpasswd: "Update passwords in batch mode [shadow]"
  chsh: "Change login shell [shadow]"
  expiry: "Check and enforce password expiration policy [shadow]"
  faillog: "Display faillog records or set login failure limits [shadow]"
  getsubids: "Get the subordinate id ranges for a user [shadow]"
  gpasswd: "Administer /etc/group and /etc/gshadow files [shadow]"
  groupadd: "Create a new group [shadow]"
  groupdel: "Delete a group [shadow]"
  groupmems: "Administer members of a user's primary group [shadow]"
  groupmod: "Modify a group definition on the system [shadow]"
  grpck: "Verify integrity of group files [shadow]"
  grpconv: "Creates gshadow from group and gshadow [shadow]"
  grpunconv: "Create group from group and gshadow and then removes gshadow [shadow]"
  lastlog: "Report the most recent login of all users or of a given user [shadow]"
  login: "Begin session on the system [shadow]"
  logoutd: "Enforce login time restrictions [shadow]"
  newgidmap: "Set the gid mapping of a user namespace [shadow]"
  newgrp: "Log in to a new group [shadow]"
  newuidmap: "Set the uid mapping of a user namespace [shadow]"
  newusers: "Update and Create new users in batch [shadow]"
  nologin: "Politely refuse a login [shadow]"
  passwd: "Change user password [shadow]"
  pwck: "Verify the integrity of password files [shadow]"
  pwconv: "Convert to shadow passwords and groups [shadow]"
  pwunconv: "Convert from shadow passwords and groups [shadow]"
  sg: "Execute command as different group ID [shadow]"
  su: "Change user ID or become superuser [shadow]"
  sulogin: "Single-user login [shadow]"
  useradd: "Create a new user or Update default new user information [shadow]"
  userdel: "Delete a user account and related files [shadow]"
  usermod: "Modify a user account [shadow]"
  vigr: "Edit the group or shadow-group file [shadow]"
  vipw: "Edit the password or shadow-password file [shadow]"
distro_pkg:
  alpine:
    - "shadow"
  debian:
    - "shadow"
  gnuguix:
    - "shadow"
  nixpkgs:
    - "shadow"
    - "su"
homepage:
  - "https://github.com/shadow-maint/shadow"
license:
  - id: "BSD-3-Clause"
    url: "https://github.com/shadow-maint/shadow/raw/d2d89a8e0a4f177ae9cdb1ef8e0a1287a39020b5/COPYING"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "chage"
  - "chfn"
  - "chgpasswd"
  - "chpasswd"
  - "chsh"
  - "expiry"
  - "faillog"
  - "getsubids"
  - "gpasswd"
  - "groupadd"
  - "groupdel"
  - "groupmems"
  - "groupmod"
  - "grpck"
  - "grpconv"
  - "grpunconv"
  - "login"
  - "logoutd"
  - "newgidmap"
  - "newgrp"
  - "newuidmap"
  - "newusers"
  - "nologin"
  - "passwd"
  - "pwck"
  - "pwconv"
  - "pwunconv"
  - "sg"
  - "useradd"
  - "userdel"
  - "usermod"
  - "vigr"
  - "vipw"
repology:
  - "shadow"
src_url:
  - "https://github.com/shadow-maint/shadow"
tag:
  - "Utility"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#shadow" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.shadow" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "${SBUILD_TMPDIR}/nixbuild" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent "  "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -Rv "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -Rv 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 