#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/pelf.yaml
_disabled: false

pkg: "pelf"
pkg_id: "github.com.xplshn.pelf"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
  - "appbundle, appdir, appimage, binary-distribution, bundle, bundler, dynamic-libraries, elf, executable-format, no-dependencies, package-format, packaging-tool, pelf, portable-executable, posix, single-file, static, statically-linked, staticx"
description: "Pack an ELF. Turn your binaries into single-file executables [.AppBundle OR .blob], similar to a AppImages/AppDirs."
homepage:
  - "https://github.com/xplshn/pelf"
license:
  - id: "MIT"
    url: "https://github.com/aptly-dev/aptly/raw/90343b21d3199e097f6a31803ec3fbfbe1471723/LICENSE"  
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built From Source (Latest Git HEAD). Check/Report @ https://github.com/aptly-dev/aptly"
provides:
  - "aptly"
repology:
  - "pelf"
src_url:
  - "https://github.com/xplshn/pelf"
tag:
  - "utility"
  - "appbundle, appdir, appimage, binary-distribution, bundle, bundler, dynamic-libraries, elf, executable-format, no-dependencies, package-format, packaging-tool, pelf, portable-executable, posix, single-file, static, statically-linked, staticx"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    {EMPTY}
  run: |
    #!/usr/bin/env bash

#-------------------------------------------------------#
#Sanity Checks
if [ "${BUILD}" != "YES" ] || \
   [ -z "${BINDIR}" ] || \
   [ -z "${EGET_EXCLUDE}" ] || \
   [ -z "${EGET_TIMEOUT}" ] || \
   [ -z "${GIT_TERMINAL_PROMPT}" ] || \
   [ -z "${GIT_ASKPASS}" ] || \
   [ -z "${GITHUB_TOKEN}" ] || \
   [ -z "${SYSTMP}" ] || \
   [ -z "${TMPDIRS}" ]; then
 #exit
  echo -e "\n[+]Skipping Builds...\n"
  exit 1
fi
#-------------------------------------------------------#

#-------------------------------------------------------#
##Main
export SKIP_BUILD="NO" #YES, in case of deleted repos, broken builds etc
if [ "${SKIP_BUILD}" == "NO" ]; then
    #pelf : Pack an ELF. Turn your binaries into single-file executables [.AppBundle|.blob], similar to a AppImages/AppDirs.
     export BIN="pelf"
     export SOURCE_URL="https://github.com/xplshn/pelf"
     echo -e "\n\n [+] (Building | Fetching) ${BIN} :: ${SOURCE_URL} [$(TZ='UTC' date +'%A, %Y-%m-%d (%I:%M:%S %p)') UTC]\n"
      #Build
       pushd "$($TMPDIRS)" >/dev/null 2>&1 && git clone --quiet --filter "blob:none" "https://github.com/xplshn/pelf" && cd "./pelf/cmd/pelfd"
       rm -rf "go.mod" 2>/dev/null ; go mod init "github.com/xplshn/pelf" && go mod tidy
       GOOS="linux" GOARCH="amd64" CGO_ENABLED="0" go build -x -v -ldflags="-buildid= -s -w -extldflags '-static'" -o "./pelfd-bin" ; cp "./pelfd-bin" "$BINDIR/pelfd"
       curl -qfsSL "https://raw.githubusercontent.com/xplshn/pelf/master/pelf" -o "$BINDIR/pelf"
       curl -qfsSL "https://raw.githubusercontent.com/xplshn/pelf/master/pelf_extract" -o "$BINDIR/pelf_extract"
       curl -qfsSL "https://raw.githubusercontent.com/xplshn/pelf/master/pelf_linker" -o "$BINDIR/pelf_linker"
       popd >/dev/null 2>&1 ; go clean -cache -fuzzcache -modcache -testcache
fi
#-------------------------------------------------------#

#-------------------------------------------------------#
##Cleanup
unset SKIP_BUILD ; export BUILT="YES"
#In case of zig polluted env
unset AR CC CFLAGS CXX CPPFLAGS CXXFLAGS DLLTOOL HOST_CC HOST_CXX LDFLAGS LIBS OBJCOPY RANLIB
#In case of go polluted env
unset GOARCH GOOS CGO_ENABLED CGO_CFLAGS
#PKG Config
unset PKG_CONFIG_PATH PKG_CONFIG_LIBDIR PKG_CONFIG_SYSROOT_DIR PKG_CONFIG_SYSTEM_INCLUDE_PATH PKG_CONFIG_SYSTEM_LIBRARY_PATH
#-------------------------------------------------------#
