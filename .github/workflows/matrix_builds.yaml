name: 🧰🛠️ Build Package 📦📀

permissions:
  contents: write

on:
  workflow_call:
    inputs:
      host:
        description: Host (Arch+OS) [aarch64-Linux,x86_64-Linux] (ALL)
        type: string
        default: "ALL"

      sbuild-url:
        description: Raw URL where SBUILD is located
        type: string
        required: true

      ghcr-url:
        description: Root GHCR URL under which this package will be pushed
        type: string
        required: true

      pkg-family:
        description: Package Family
        type: string
        required: true

      banner:
        description: Disable PkgForge Branding in LogFiles [Default ==> False (Enabled)]
        type: boolean
        default: true

      debug:
        description: Debug Mode (Verbose with set -x) [Default ==> False]
        type: boolean
        default: false

      logs:
        description: Keep Logs? (Preserves Working Dir) [Default ==> True]
        type: boolean
        default: true

      rebuild:
        description: Force Rebuild this Package? [Default ==> True]
        type: boolean
        default: true

jobs:
  preprocess:
    runs-on: ubuntu-latest
    outputs:
      runner_matrix: ${{ steps.generate-matrix.outputs.runner_matrix }}
    steps:
      - name: Presetup
        id: generate-matrix
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          pushd "$(mktemp -d)" &>/dev/null
           echo '[' > "./MATRIX.json.tmp"
            if [[ "${{ inputs.host }}" == "ALL" ]]; then
              echo '{"host": "aarch64-Linux", "runner": "ubuntu-24.04-arm", "ghcr_pkg": "${{ inputs.ghcr-url }}"},' >> "./MATRIX.json.tmp"
              echo '{"host": "x86_64-Linux", "runner": "ubuntu-latest", "ghcr_pkg": "${{ inputs.ghcr-url }}"}' >> "./MATRIX.json.tmp"
            elif [[ "${{ inputs.host }}" == "aarch64-Linux" ]]; then
              echo '{"host": "aarch64-Linux", "runner": "ubuntu-24.04-arm", "ghcr_pkg": "${{ inputs.ghcr-url }}"}' >> "./MATRIX.json.tmp"
            elif [[ "${{ inputs.host }}" == "x86_64-Linux" ]]; then
              echo '{"host": "x86_64-Linux", "runner": "ubuntu-latest", "ghcr_pkg": "${{ inputs.ghcr-url }}"}' >> "./MATRIX.json.tmp"
            fi
           echo ']' >> "./MATRIX.json.tmp"
           jq 'unique_by(.runner)' "./MATRIX.json.tmp" | jq . > "./MATRIX.json"
           ESCAPED_MATRIX="$(cat "./MATRIX.json" | jq -c .)"
           echo "runner_matrix=${ESCAPED_MATRIX}" >> "${GITHUB_OUTPUT}"
          popd &>/dev/null
        continue-on-error: false

      - name: Sanity Check Input JSON
        run: |
          echo '${{ steps.generate-matrix.outputs.runner_matrix }}' | jq .
        continue-on-error: true

  build:
    needs: [preprocess]
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.preprocess.outputs.runner_matrix) }}
    name: "${{ matrix.package.host }} ==> (${{ matrix.package.ghcr_pkg }})"
    runs-on: "${{ matrix.package.runner }}"
    timeout-minutes: 200
    permissions:
      attestations: write #Needed for Build Provenance & Attestations
      contents: write #Needed to create Release
      id-token: write #Needed for Build Provenance & Attestations
      packages: write #Needed to push to ghcr
    steps:
      - name: Exit if not called
        env:
          GH_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          if [[ "$(uname -m | tr -d '[:space:]')" == "aarch64" ]]; then
            if [[ "${{ inputs.host }}" != "ALL" ]] && [[ "${{ inputs.host }}" != "aarch64-Linux" ]]; then
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            fi
          elif [[ "$(uname -m | tr -d '[:space:]')" == "x86_64" ]]; then
            if [[ "${{ inputs.host }}" != "ALL" ]] && [[ "${{ inputs.host }}" != "x86_64-Linux" ]]; then
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            fi
          fi
        continue-on-error: false

      - name: Validate Required Secrets [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          RO_GHTOKEN: "${{ secrets.RO_GHTOKEN }}" #The existing GITHUB_TOKEN is over privileged
          RO_GLTOKEN: "${{ secrets.RO_GLTOKEN }}"
          MINISIGN_KEY: "${{ secrets.MINISIGN_KEY }}" #Will be skipped silently
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          # Check if any of the required secrets are missing
          if [ -z "${RO_GHTOKEN##*[[:space:]]}" ] || [ -z "${RO_GLTOKEN##*[[:space:]]}" ] || [ -z "${MINISIGN_KEY##*[[:space:]]}" ]; then
            echo "::warning::One or more required secrets are missing"
            [ -z "${RO_GHTOKEN##*[[:space:]]}" ] && echo "- RO_GHTOKEN is missing (Needed for GitHub Public API Requests)"
            [ -z "${RO_GLTOKEN##*[[:space:]]}" ] && echo "- RO_GLTOKEN is missing (Needed for GitLab Public API Requests)"
            [ -z "${MINISIGN_KEY##*[[:space:]]}" ] && echo "- MINISIGN_KEY is missing (Needed for Signing Artifacts)"
          fi
        continue-on-error: false

      - name: Parse Input [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          GH_TOKEN: "${{ github.token }}"
          GITHUB_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          export HOST_TRIPLET="$(uname -m)-$(uname -s)"
          export "GH_PAGER="
          gh config set prompt disabled &>/dev/null
          ##Banner
           if [ "${{ inputs.banner }}" == "false" ] ; then
             export BANNER="0"
           else
             export BANNER="1"
           fi
           echo "BANNER=${BANNER}" >> "${GITHUB_ENV}"
          ##Debug
           if [ "${{ inputs.debug }}" == "true" ] ; then
             export DEBUG="1"
           else
             export DEBUG="0"
           fi
           echo "DEBUG=${DEBUG}" >> "${GITHUB_ENV}"
          ##GITHUB_REPOSITORY [Exists?]
           if [[ -z "${GITHUB_REPOSITORY//[[:space:]]/}" ]]; then
              echo -e "\n[✗] FATAL: Failed to Get \$GITHUB_REPOSITORY\n"
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
           elif echo "${GITHUB_REPOSITORY}" | grep -qiE 'github.com'; then
              GITHUB_REPOSITORY="$(echo "${GITHUB_REPOSITORY}" | sed -E 's|^(https://github.com/)?([^/]+/[^/]+).*|\2|' | tr -d '[:space:]')"
              export GITHUB_REPOSITORY
              echo "GITHUB_REPOSITORY=${GITHUB_REPOSITORY}" >> "${GITHUB_ENV}"
           fi
          ##GITHUB_REPOSITORY [Is a Fork?]
           if [[ "$(gh repo view "${GITHUB_REPOSITORY}" --json isFork -q '.isFork' | tr -d '[:space:]')" == "true" ]]; then
              echo -e "\n[✗] FATAL: \$GITHUB_REPOSITORY must NOT be a Fork\n"
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
           fi
          ##GHCRPKG_URL
           GHCRPKG_LOCAL="$(echo "${{ inputs.ghcr-url }}" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
           export GHCRPKG_LOCAL
           if echo "${GHCRPKG_LOCAL}" | grep -qiE '^ghcr\.io(/|$)'; then
             echo "GHCRPKG_LOCAL=${GHCRPKG_LOCAL}" >> "${GITHUB_ENV}"
           else
             echo -e "\n[✗] FATAL: ${GHCRPKG_LOCAL} is NOT a Valid GHCR Value\n"
             echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            exit 1
           fi
          ##Logs
           if [ "${{ inputs.logs }}" == "false" ] ; then
             export KEEP_LOGS="NO"
           else
             export KEEP_LOGS="YES"
             export GITHUB_TEST_BUILD="YES"
           fi
           echo "KEEP_LOGS=${KEEP_LOGS}" >> "${GITHUB_ENV}"
           echo "GITHUB_TEST_BUILD=${GITHUB_TEST_BUILD}" >> "${GITHUB_ENV}"
          ##PKG_FAMILY_LOCAL
           PKG_FAMILY_LOCAL="$(echo "${{ inputs.pkg-family }}" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
           export PKG_FAMILY_LOCAL
           echo "PKG_FAMILY_LOCAL=${PKG_FAMILY_LOCAL}" >> "${GITHUB_ENV}"
          ##Rebuild
           if [ "${{ inputs.rebuild }}" == "false" ] ; then
             export SBUILD_REBUILD="false"
           else
             export SBUILD_REBUILD="true"
           fi
           echo "SBUILD_REBUILD=${SBUILD_REBUILD}" >> "${GITHUB_ENV}"
           ##SBUILD_URL
           sudo curl -qfsSL "https://bin.pkgforge.dev/${HOST_TRIPLET}/yq" -o "/usr/local/bin/yq" && \
             sudo chmod 'a+x' "/usr/local/bin/yq" && command -v yq >/dev/null || exit 1
           SBUILD_FILE_URL="$(echo "${{ inputs.sbuild-url }}" | tr -d '[:space:]')"
           pushd "$(mktemp -d)" &>/dev/null
             curl -w "(SBUILD) <== %{url}\n" -fL "${SBUILD_FILE_URL}" -o "./SBUILD_INPUT"
             if [[ ! -s "./SBUILD_INPUT" || $(stat -c%s "./SBUILD_INPUT") -le 10 ]]; then
               echo -e "\n[✗] FATAL: Failed to Fetch ${SBUILD_FILE_URL}\n"
               echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
              exit 1
             else
               export SBUILD_FILE_URL
               echo "SBUILD_FILE_URL=${SBUILD_FILE_URL}" >> "${GITHUB_ENV}"
              #Check for x_exec.host
               if yq e '.x_exec.host != null' "./SBUILD_INPUT" | grep -qi 'true'; then
                 if ! yq '.x_exec.host[]' "./SBUILD_INPUT" | grep -v '^#' | grep -qi "${HOST_TRIPLET,,}"; then
                   echo -e "\n[✗] WARNING: SBUILD (./SBUILD_INPUT) is NOT Supported on ${HOST_TRIPLET}\n"
                   yq '.x_exec.host[]' "./SBUILD_INPUT"
                   echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
                 fi
               fi
             fi
           popd &>/dev/null
        continue-on-error: false

      - name: Setup Env [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        env:
          MINISIGN_KEY: "${{ secrets.MINISIGN_KEY }}" #Private Key is saved locally
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##CoreUtils
          export DEBIAN_FRONTEND="noninteractive"
          echo "DEBIAN_FRONTEND=${DEBIAN_FRONTEND}" >> "${GITHUB_ENV}"
          sudo apt update -y -qq
          #https://github.com/ilikenwf/apt-fast?tab=readme-ov-file#quick-install
          bash -c "$(curl -qfsSL 'https://raw.githubusercontent.com/ilikenwf/apt-fast/master/quick-install.sh')"
          if ! command -v apt-fast &> /dev/null; then
             echo -e "\n[-] docker NOT Found\n"
             echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
          fi
          sudo apt-fast install apt-transport-https apt-utils bc ca-certificates coreutils curl dos2unix fdupes git-lfs gnupg2 \
          jq moreutils p7zip-full rename rsync software-properties-common texinfo tmux torsocks util-linux wget zsync -y -qq 2>/dev/null
          sudo apt-fast update -y -qq 2>/dev/null
          #Minisign
          if [ -n "${MINISIGN_KEY+x}" ] && [[ "${MINISIGN_KEY}" =~ ^[^[:space:]]+$ ]]; then
           mkdir -pv "${HOME}/.minisign"
           echo "${{ secrets.MINISIGN_SIGKEY }}" > "${HOME}/.minisign/minisign.key"
          fi
          ##tmp
          SYSTMP="$(dirname $(mktemp -u))" && export SYSTMP="${SYSTMP}"
          #GH ENV
          echo "SYSTMP=${SYSTMP}" >> "${GITHUB_ENV}"
          echo "GHA_MODE=MATRIX" >> "${GITHUB_ENV}"
          echo "GIT_TERMINAL_PROMPT=0" >> "${GITHUB_ENV}"
          echo "GIT_ASKPASS=/bin/echo" >> "${GITHUB_ENV}"
          echo "GH_PAGER=" >> "${GITHUB_ENV}"
          gh config set prompt disabled
          git config --global "credential.helper" store
          git config --global "user.email" "AjamX101@gmail.com"
          git config --global "user.name" "Azathothas"
          ##User-Agent
          USER_AGENT="$(curl -qfsSL 'https://raw.githubusercontent.com/pkgforge/devscripts/refs/heads/main/Misc/User-Agents/ua_chrome_macos_latest.txt')" && export USER_AGENT="${USER_AGENT}"
          echo "USER_AGENT=${USER_AGENT}" >> "${GITHUB_ENV}"
          ##Wget
          echo 'progress = dot:giga' | sudo tee -a "/etc/wgetrc"
          echo 'progress = dot:giga' | tee -a "${HOME}/.wgetrc"
        continue-on-error: true

      - name: Create Metadata Tag [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          GH_TOKEN: "${{ github.token }}"
          GITHUB_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          METADATA_TAG="soar-nest"
          export METADATA_TAG="$(echo "${METADATA_TAG}" | tr -d '[:space:]')"
          echo "METADATA_TAG=${METADATA_TAG}" >> "${GITHUB_ENV}"
          echo "GH_PAGER=" >> "${GITHUB_ENV}"
          gh config set prompt disabled
          gh release create "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}" --title "${METADATA_TAG}" --prerelease
          sleep 3 ; gh release view "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}"
          METADATA_TAG_URL="https://github.com/${GITHUB_REPOSITORY}/releases/tag/${METADATA_TAG}"
          echo METADATA_TAG_URL="${METADATA_TAG_URL}" >> "${GITHUB_ENV}"
          METADATA_TAG_STATUS="$(curl -X "HEAD" -qfsSL "${METADATA_TAG_URL}" -I | sed -n 's/^[[:space:]]*HTTP\/[0-9.]*[[:space:]]\+\([0-9]\+\).*/\1/p' | tail -n1 | tr -d '[:space:]')"
          if echo "${METADATA_TAG_STATUS}" | grep -qi '200$'; then
            export METADATA_DIR="/tmp/PKG_METADATA"
            echo "METADATA_DIR=${METADATA_DIR}" >> "${GITHUB_ENV}"
            mkdir -pv "${METADATA_DIR}"
            echo "CONTINUE_GHRUN=TRUE" >> "${GITHUB_ENV}"
          else
            echo -e "\n[✗] FATAL: Failed to Create ${METADATA_TAG} <== [Release Tag]\n"
            echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
           exit 1
          fi
        continue-on-error: true

      - name: Disable apparmor_restrict_unprivileged_userns #Required for fuse (Runimage etc)
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #presets
          set +x ; set +e
          #-------------#
          echo "kernel.apparmor_restrict_unprivileged_userns=0" | sudo tee "/etc/sysctl.d/98-apparmor-unuserns.conf"
          echo "0" | sudo tee "/proc/sys/kernel/apparmor_restrict_unprivileged_userns"
          sudo service procps restart
          sudo sysctl -p "/etc/sysctl.conf"
        continue-on-error: true

      - name: BUILD (${{ env.GHCRPKG_LOCAL }}) [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          GHCR_TOKEN: "${{ github.token }}" #Should Never be exported/used by something else (Is Over Privileged)
          GH_TOKEN: "${{ secrets.RO_GHTOKEN }}" #Should be a underprivileged Read Only Token
          GITHUB_TOKEN: "${{ secrets.RO_GHTOKEN }}" #Should be a underprivileged Read Only Token
          GITLAB_TOKEN: "${{ secrets.RO_GLTOKEN }}" #Should be a underprivileged Read Only Token
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##Env
          if [ -z "${GITHUB_TOKEN+x}" ] || [ -z "${GITHUB_TOKEN##*[[:space:]]}" ]; then
            echo "::warning::Using Over Privileged Github Token \${GHCR_TOKEN}"
            export GITHUB_TOKEN="${GHCR_TOKEN}"
          fi
          ##Main
          pushd "$(mktemp -d)" &>/dev/null
           curl -qfsSL "https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/.github/scripts/ci/builder.sh" -o "${SYSTMP}/BUILDER.sh"
           if [[ ! -s "${SYSTMP}/BUILDER.sh" || $(stat -c%s "${SYSTMP}/BUILDER.sh") -le 3 ]]; then
              echo -e "\n[✗] FATAL: Failed to Fetch Builder\n"
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1 
           fi
           dos2unix --quiet "${SYSTMP}/BUILDER.sh" ; chmod -v 'a+x' "${SYSTMP}/BUILDER.sh"
           ##Run with STDOUT + LOGS
            export DEBUG="${DEBUG}"
            export KEEP_LOGS="${KEEP_LOGS}"
            export PKG_FAMILY_LOCAL="${PKG_FAMILY_LOCAL}"
            export GHCRPKG_LOCAL="${GHCRPKG_LOCAL}"
            export SBUILD_REBUILD="${SBUILD_REBUILD}"
            export GITHUB_TEST_BUILD="${GITHUB_TEST_BUILD}"
            bash "${SYSTMP}/BUILDER.sh" "${SBUILD_FILE_URL}" | tee "${SYSTMP}/BUILD.log" 2>&1
           ##Purge Tokens (in case set -x & gh didn't redact)
           if ! command -v ansi2txt &> /dev/null; then
             cat "${SYSTMP}/BUILD.log" > "${SYSTMP}/BUILD.gh.log.txt"
           else
             cat "${SYSTMP}/BUILD.log" | ansi2txt > "${SYSTMP}/BUILD.gh.log.txt"
           fi
           sed -i '/.*github_pat.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*ghp_.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*access_key_id.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*token.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*secret_access_key.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*token.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*cloudflarestorage.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           mv -fv "${SYSTMP}/BUILD.gh.log.txt" "${SYSTMP}/BUILD.log"
          popd &>/dev/null
        continue-on-error: true

      - name: Push Artifacts (${{ env.GHCRPKG_LOCAL }}) [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          #GHCR_TOKEN: "${{ secrets.GHCR_TOKEN }}" #Needs Actions' Token if we want to make the packages public
          GHCR_TOKEN: "${{ github.token }}"
          GITHUB_TOKEN: "${{ secrets.RO_GHTOKEN }}"
          GITLAB_TOKEN: "${{ secrets.RO_GLTOKEN }}"
          MINISIGN_KEY: "${{ secrets.MINISIGN_KEY }}"
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##Set ENV
          if [[ -n "${{ env.BUILD_ID }}" ]] && [[ "${{ env.BUILD_ID }}" =~ ^[^[:space:]]+$ ]]; then
            if [[ "${SKIP_SRCBUILD_UPLOAD}" != "YES" ]]; then
               #GHCRPKG_TAG_SRCBUILD="srcbuild.$(date --utc +"%y%m%dT%H%M%S" | tr -d '[:space:]')-${{ env.GHCRPKG_TAG }}"
               GHCRPKG_TAG_SRCBUILD="${{ env.GHCRPKG_TAG }}"
               GHCRPKG_URL_SRCBUILD="${{ env.GHCRPKG_LOCAL }}/${{ env.PKG_FAMILY_LOCAL }}-srcbuild-${{ env.BUILD_ID }}"
               export GHCRPKG_TAG_SRCBUILD GHCRPKG_URL_SRCBUILD
               echo "GHCRPKG_TAG_SRCBUILD=${GHCRPKG_TAG_SRCBUILD}" >> "${GITHUB_ENV}"
               echo "GHCRPKG_URL_SRCBUILD=${GHCRPKG_URL_SRCBUILD}" >> "${GITHUB_ENV}"
            fi
           ##Push 
            if [[ -n "${GHCRPKG_TAG_SRCBUILD+x}" ]]; then
             pushd "/tmp" &>/dev/null
              if [[ -s "./BUILD_ARTIFACTS.7z" && $(stat -c%s "./BUILD_ARTIFACTS.7z") -gt 1000 ]]; then
                realpath "./BUILD_ARTIFACTS.7z" && du -sh "./BUILD_ARTIFACTS.7z"
                ls -sh "${{ env.SBUILD_OUTDIR }}"
                ghcr_push_cmd()
                  {
                   for i in {1..10}; do
                     unset ghcr_push ; ghcr_push=(oras push --disable-path-validation)
                     ghcr_push+=(--config "/dev/null:application/vnd.oci.empty.v1+json")
                     ghcr_push+=(--annotation "com.github.package.type=container")
                     ghcr_push+=(--annotation "dev.pkgforge.soar.build_ghcrpkg-tag=${{ env.GHCRPKG_TAG }}")
                     ghcr_push+=(--annotation "dev.pkgforge.soar.build_gha=${{ env.BUILD_GHACTIONS }}")
                     ghcr_push+=(--annotation "dev.pkgforge.soar.build_id=${{ env.BUILD_ID }}")
                     ghcr_push+=(--annotation "dev.pkgforge.soar.ghcr_pkg=${{ env.GHCRPKG_URL }}:${{ env.GHCRPKG_TAG }}")
                     ghcr_push+=(--annotation "dev.pkgforge.soar.push_date=${{ env.PKG_DATE }}")
                     ghcr_push+=(--annotation "dev.pkgforge.soar.version=${{ env.PKG_VERSION }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.created=${{ env.PKG_DATE }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.description=SRCBUILD for ${{ env.GHCRPKG_URL }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.licenses=blessing")
                     ghcr_push+=(--annotation "org.opencontainers.image.ref.name=${{ env.PKG_VERSION }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.revision=${{ env.PKG_VERSION }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.source=${{ env.PKG_WEBPAGE }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.title=SRCBUILD-${{ env.PKG_FAMILY_LOCAL }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.url=${{ env.PKG_SRCURL }}")
                     ghcr_push+=(--annotation "org.opencontainers.image.vendor=pkgforge")
                     ghcr_push+=(--annotation "org.opencontainers.image.version=${{ env.PKG_VERSION }}")
                     ghcr_push+=("${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD}")
                     [[ -f "./BUILD_ARTIFACTS.7z" && -s "./BUILD_ARTIFACTS.7z" ]] && ghcr_push+=("./BUILD_ARTIFACTS.7z")
                     "${ghcr_push[@]}" ; sleep 5
                    #Check
                     if [[ "$(oras manifest fetch "${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD}" | jq -r '.annotations["dev.pkgforge.soar.push_date"]' | tr -d '[:space:]')" == "${{ env.PKG_DATE }}" ]]; then
                       echo -e "\n[+] (ARTIFACTS) Registry --> https://${GHCRPKG_URL_SRCBUILD}\n"
                       break
                     else
                       echo -e "\n[-] Failed to Push Artifact to ${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD} (Retrying ${i}/10)\n"
                     fi
                     sleep "$(shuf -i 500-4500 -n 1)e-3"
                   done
                  }
                  export -f ghcr_push_cmd
                  ghcr_push_cmd
                  if [[ "$(oras manifest fetch "${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD}" | jq -r '.annotations["dev.pkgforge.soar.push_date"]' | tr -d '[:space:]')" != "${{ env.PKG_DATE }}" ]]; then
                    echo -e "\n[✗] Failed to Push Artifact to ${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD}\n"
                     echo -e "\n[-] Retrying ...\n"
                     ghcr_push_cmd
                      if [[ "$(oras manifest fetch "${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD}" | jq -r '.annotations["dev.pkgforge.soar.push_date"]' | tr -d '[:space:]')" != "${{ env.PKG_DATE }}" ]]; then
                        oras manifest fetch "${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD}" | jq .
                        echo -e "\n[✗] Failed to Push Artifact to ${GHCRPKG_URL_SRCBUILD}:${GHCRPKG_TAG_SRCBUILD}\n"
                        return 1 || exit 1
                      fi
                  fi
              fi
            fi
           popd >/dev/null 2>&1
          fi
        continue-on-error: true

    ##Logs & Artifacts
      - name: Get DateTime [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          UTC_TIME="$(TZ='UTC' date +'%Y_%m_%dT%I_%M_%S_%p')"
          echo "UTC_TIME=${UTC_TIME}" >> "${GITHUB_ENV}"
        continue-on-error: true

      - name: Upload (LOG) Artifacts [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        uses: actions/upload-artifact@v4
        with:
            name: ${{ env.PKG_FAMILY_LOCAL }}_${{ matrix.package.host }}
            path: |
              /tmp/BUILD.log
              /tmp/BUILD_ARTIFACTS.7z
            compression-level: 0 # no compression, [Default: 6 (GNU Gzip)]
            retention-days: 30
            overwrite: true
        continue-on-error: true

      - name: Attest Build Provenance [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        uses: actions/attest-build-provenance@v2.3.0
        with:
          subject-name: "${{ env.PKG_FAMILY_LOCAL }}-${{ env.BUILD_ID }}-${{ env.GHCRPKG_TAG }}"
          subject-path: |
            "/tmp/BUILD.log"
            "/tmp/BUILD_ARTIFACTS.7z"
            ${{ env.SBUILD_OUTDIR }}/**
            !${{ env.SBUILD_TMPDIR }}/**
          show-summary: true
        continue-on-error: true

      - name: Check Build [${{ matrix.package.ghcr_pkg }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          if [[ "${GHA_BUILD_FAILED}" == "YES" || "${SBUILD_SUCCESSFUL}" == "NO" ]]; then
            echo -e "\n[-] FATAL: Failed to Successfully Build ${{ matrix.package.ghcr_pkg }}"
            echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
           exit 1
          else
            echo -e "\n[+] Package: https://${{ env.GHCRPKG_URL }}\n"
          fi
        continue-on-error: false

      - name: Check Push [${{ matrix.package.ghcr_pkg }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          GH_TOKEN: "${{ github.token }}"
          GITHUB_TOKEN: "${{ github.token }}"
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          if [[ "${PUSH_SUCCESSFUL}" == "NO" ]]; then
            echo -e "\n[-] FATAL: Failed to Successfully Push ==> ${{ matrix.package.ghcr_pkg }}"
           exit 1
          else
            pushd "${METADATA_DIR}" &>/dev/null &&\
               ls -lah "."
              #Generate JSON
               export PKG_FAMILY="${{ env.PKG_FAMILY_LOCAL }}"
               find "${METADATA_DIR}" -maxdepth 1 -type f -iname "*${HOST_TRIPLET}.json*" -size +3c -exec bash -c 'jq empty "{}" 2>/dev/null && cat "{}"' \; | jq 'walk(if type == "boolean" or type == "number" then tostring else . end)' | jq -s 'if type == "array" then . else [.] end' |\
                jq 'walk(if type == "object" then with_entries(select(.value != "" and .value != [] and .value != {})) else . end)' |\
                jq 'map(select(
                   .pkg != null and .pkg != "" and
                   .pkg_id != null and .pkg_id != "" and
                   .pkg_name != null and .pkg_name != "" and
                   .description != null and .description != "" and
                   .ghcr_pkg != null and .download_url != "" and
                   .version != null and .version != ""
                ))' | jq 'unique_by(.ghcr_pkg) | sort_by(.pkg)' > "${SYSTMP}/${HOST_TRIPLET}.json"
              #Sanity Check
               sed -E 's~\bhttps?:/{1,2}\b~https://~g' -i "${SYSTMP}/${HOST_TRIPLET}.json"
               if [[ "$(jq -r '.[] | .pkg_family' "${SYSTMP}/${HOST_TRIPLET}.json" | sort -u | head -n 1 | tr -d '[:space:]')" == "${PKG_FAMILY}" ]]; then
                 cp -fv "${SYSTMP}/${HOST_TRIPLET}.json" "${METADATA_DIR}/${HOST_TRIPLET}.json"
                 find "${METADATA_DIR}" -maxdepth 1 -type f -iname "*${HOST_TRIPLET}.json*" -size +3c -print0 | xargs -0 -P "$(($(nproc)+1))" -I '{}' gh release upload "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}" '{}' --clobber ; sleep 3
                 gh release upload "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}" "${METADATA_DIR}/SBUILD" --clobber
                 sleep 3 ; gh release view "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}" 2>/dev/null || true
                 echo -e "\n[+] Metadata: ${METADATA_TAG_URL}\n"
               else
                 echo -e "\n[-] FATAL: Failed to Merge Metadata ==> ${METADATA_TAG_URL}"
                exit 1
               fi
            popd &>/dev/null
          fi
        continue-on-error: false