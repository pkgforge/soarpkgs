#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/packages/wrangler/archive.sharun.npm.yaml
_disabled: false

pkg: "wrangler"
pkg_id: "sharun.wrappe.npm.wrangler"
pkg_type: "archive"
category:
  - "Utility"
description: "Command-line interface for all things Cloudflare Workers"
distro_pkg:
  archlinux:
    extra:
      - "wrangler"
  homebrew:
    - "wrangler"
  nixpkgs:
    - "wrangler"
    - "wrangler_1"
homepage:
  - "https://developers.cloudflare.com/workers/cli-wrangler"
  - "https://github.com/cloudflare/workers-sdk"
license:
  - id: "MIT"
    url: "https://github.com/cloudflare/workers-sdk/raw/47f56a2a4dcfa216d768fec974c2fa8c5bb3c21c/LICENSE-MIT"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Sharun [npm]. Check/Report @ https://github.com/VHSgunzo/sharun"
  - "Learn more @ https://docs.pkgforge.dev/formats/packages/archive"
  - "[PORTABLE] (Works on AnyLinux)"
  - "[NO_DESKTOP_INTEGRATION] (Does not need desktop integration)"
provides:
  - "wrangler"
repology:
  - "wrangler"
src_url:
  - "https://www.npmjs.com/package/wrangler"
tag:
  - "Utility"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    curl -qfsSL "https://registry.npmjs.org/wrangler/latest" | jq -r '[.. | .version?] | map(select(. != null)) | first' | tr -d '"'\''[:space:]'
  run: |
    #Build
     mkdir -pv "${SBUILD_TMPDIR}/tmp" && docker run --privileged --net="host" --name "alpine-builder" --pull="always" \
     -e "PKG=${PKG}" -e "PKG_ID=${PKG_ID}" -e "PKG_TYPE=${PKG_TYPE}" -e "PKG_VER=${PKG_VER}" \
     -e "PKGVER=${PKGVER}" -e "SBUILD_PKG=${SBUILD_PKG}" -e "SBUILD_PKGVER=${SBUILD_PKGVER}" \
     --volume "${SBUILD_TMPDIR}/tmp:/tmp:rw" \
     "alpine:edge" \
      sh -c '
       mkdir -p "/build-bins" && cd "$(mktemp -d)" &>/dev/null
       apk update && apk upgrade --no-interactive 2>/dev/null
       apk cache clean --purge
      #CoreUtils
       apk add 7zip bash binutils coreutils croc curl findutils file g++ git grep jq libc-dev linux-headers moreutils patchelf rsync sed strace tar tree xz zstd --latest --upgrade --no-interactive 2>/dev/null
      #Sharun
       curl -qfsSL "https://api.gh.pkgforge.dev/repos/VHSgunzo/sharun/releases?per_page=100" | jq -r ".. | objects | .browser_download_url? // empty" | grep -Ei "$(uname -m)" | grep -Eiv "tar\.gz|\.b3sum" | grep -Ei "sharun" | grep -Ei "aio" | sort --version-sort | tail -n 1 | tr -d "[:space:]" | xargs -I "{}" curl -qfsSL "{}" -o "/usr/local/bin/sharun"
       chmod -v "a+x" "/usr/local/bin/sharun"
       command -v sharun &>/dev/null || echo -e "\[X] FATAL: sharun is NOT Installed\n$(exit 1)"
      #Node & Deps
       apk add icu --latest --upgrade --no-interactive
       apk add nodejs-current --latest --upgrade --no-interactive
       apk add nodejs-current-dev --latest --upgrade --no-interactive
       apk add npm --latest --upgrade --no-interactive
       apk add pnpm --latest --upgrade --no-interactive
       apk add py3-icu --latest --upgrade --no-interactive
       apk add yarn --latest --upgrade --no-interactive
       curl -qfsSL "https://bun.sh/install" | bash
       export PATH="${HOME}/.bun/bin:${PATH}"
       command -v bun &>/dev/null || echo -e "\[X] FATAL: bun is NOT Installed\n$(exit 1)"
       npm install "@vercel/ncc@latest" --global
      #Install PKG
       PKG="wrangler"
       mkdir -pv "./${PKG}" && cd "./${PKG}" && PKG_DIR="$(realpath .)" &&\
        bun install "${PKG}@latest" --cwd="${PKG_DIR}" --force
       PKG_JSON="$(node -p "require.resolve('\''${PKG}/package.json'\'', { paths: ['\''${PKG_DIR}/node_modules'\''] })" | tr -d "[:space:]")"
       PKG_ROOT_DIR="$(dirname ${PKG_JSON})"
       PKG_BIN_FILE="$(node -p "require('\''${PKG_JSON}'\'').bin.${PKG}" | tr -d "[:space:]")"
       PKG_ENTRYPOINT="$(realpath "${PKG_DIR}/node_modules/${PKG}/${PKG_BIN_FILE}")"
       [ -s "${PKG_ENTRYPOINT}" ] || exit 1
       #Create symlink without *.js/*.ts
       find "$(dirname ${PKG_ENTRYPOINT})" -type f \( -name "*.js" -o -name "*.ts" \) -exec bash -c '\''t=${1%.*};[ ! -e "$t" ]&&ln -sv "./${1##*/}" "$t"'\'' _ "{}" \;
       realpath "$(dirname ${PKG_ENTRYPOINT})" && ls "$(dirname ${PKG_ENTRYPOINT})"
       [ -s "${PKG_ENTRYPOINT%.*}" ] || echo -e "\[X] FATAL: Failed to create Symlink$(exit 1)"
      #Bundle PKG
       sharun lib4bin --gen-lib-path --hard-links --with-hooks --with-sharun --strip --dst-dir "${PKG_ROOT_DIR}" "$(which node)" -- --help
       sharun lib4bin --gen-lib-path --hard-links --with-hooks --with-sharun --strip --dst-dir "${PKG_ROOT_DIR}" "${PKG_ENTRYPOINT}" -- --help
       sharun lib4bin --gen-lib-path --hard-links --with-hooks --with-sharun --strip --dst-dir "${PKG_ROOT_DIR}" "${PKG_ENTRYPOINT%.*}" -- --help
      #Prep Dirs
       mv -fv "${PKG_DIR}/node_modules/${PKG}" "${PKG}-rootdir"
       mv -fv "${PKG_DIR}/node_modules" "${PKG}-rootdir/node_modules"
       [ -d "${PKG_DIR}/${PKG}-rootdir" ] && PKG_ROOT_DIR="$(realpath ${PKG}-rootdir)" || echo -e "\n[-] Failed to prep Dirs $(exit 1)"
       [ -s "${PKG_ROOT_DIR}/bin/${PKG}" ] || echo -e "\n[-] Failed to prep Dirs $(exit 1)"
       realpath "${PKG_ROOT_DIR}" && du -sh "${PKG_ROOT_DIR}" && echo -e "\n[+] Entrypoint ==> ${PKG_ROOT_DIR}/sharun ${PKG}"
       export PKG PKG_ROOT_DIR
      #Fix Links
       find "${PKG_ROOT_DIR}" -type f ! -path "*/shared/bin/*" ! -path "*/node_modules/*" -exec grep -l "../node_modules" "{}" \; -exec sed '\''s|\(\.\./\)\+node_modules|../node_modules|g'\'' -i "{}" \;
       find "${PKG_ROOT_DIR}/node_modules/.bin" -type l -exec test ! -e "{}" \; -exec bash -c \
       '\''
         link="{}"
         target=$(readlink "$link")
         new_target="${PKG_ROOT_DIR}/bin/$(basename "$target")"
         echo "Fixing $link: $target -> $new_target"
         ln -frsv "$new_target" "$link"
       '\'' \;
       find "${PKG_ROOT_DIR}/node_modules/.bin" -type l -exec test ! -e "{}" \; -print
      #Pack PKG
       cd "$(mktemp -d)" &>/dev/null &&\
         sharun lib4bin --wrappe-exec "${PKG}" --wrappe-dir "${PKG_ROOT_DIR}"
      #Copy
       find "." -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei "application/.*executable|text/x-perl|text/.*script" | cut -d":" -f1 | xargs realpath | xargs -I "{}" cp -fv "{}" "/build-bins/"
      #Info
       file "/build-bins/"* && du -sh "/build-bins/"*
      '
    #Copy & Meta
     docker cp "alpine-builder:/build-bins/." "${SBUILD_TMPDIR}/"
     [ -s "${SBUILD_TMPDIR}/LICENSE" ] && cp -fv "${SBUILD_TMPDIR}/LICENSE" "${SBUILD_OUTDIR}/LICENSE"
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"