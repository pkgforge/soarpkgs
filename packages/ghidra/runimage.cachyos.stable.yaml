#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/packages/ghidra/runimage.cachyos.stable.yaml
_disabled: false

pkg: "ghidra"
pkg_id: "runimage.cachyos.ghidra"
pkg_type: "runimage"
category:
 - "Utility"
description: "Software reverse engineering (SRE) suite of tools"
desktop:
  url: "https://gitlab.alpinelinux.org/alpine/aports/-/raw/master/testing/ghidra/ghidra.desktop"
distro_pkg:
  alpine:
    - "ghidra"
  archlinux:
    aur:
      - "ghidra-git"
    extra:
      - "ghidra"
  homebrew:
    - "ghidra"
  nixpkgs:
    - "ghidra"
    - "ghidra-bin"
homepage:
  - "https://ghidra-sre.org"
  - "https://github.com/NationalSecurityAgency/ghidra"
icon:
  #url: "https://raw.githubusercontent.com/NationalSecurityAgency/ghidra/refs/heads/master/GhidraDocs/images/GHIDRA_1.png" 
  url: "https://raw.githubusercontent.com/pkgforge/soarpkgs/main/packages/ghidra/assets/default.png"
license:
  - id: "Apache-2.0"
    url: "https://github.com/NationalSecurityAgency/ghidra/raw/9a7a06f5f682ed0c5cfc2760c13bcd5cfe28a532/LICENSE"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using RunImage [cachyos]. Check/Report @ https://github.com/VHSgunzo/runimage"
  - "Learn more @ https://docs.pkgforge.dev/formats/packages/runimage"
  - "[PORTABLE] (Works on AnyLinux)"
provides:
  - "ghidra"
repology:
  - "ghidra"
src_url:
  - "https://aur.archlinux.org/packages/ghidra-git-bin"
tag:
  - "Security"
x_exec:
  host:
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    curl -qfsSL "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=ghidra-git-bin" | sed -n 's/^pkgver=//p' | tr -d '"'\''[:space:]'
  run: |
    #Get BaseImage
     curl -qfsSL "https://github.com/pkgforge-dev/runimage-base/releases/download/cachyos_$(uname -m)/runimage" -o "${SBUILD_TMPDIR}/runimage"
     chmod -v 'a+x' "${SBUILD_TMPDIR}/runimage"
     [[ -s "${SBUILD_TMPDIR}/runimage" ]] || exit 1
    #Deps
     build_image()
      {
       #Requirements
        sudo pacman -y --sync --refresh --refresh --sysupgrade --noconfirm
        BASE_PKGS=(glib glibc java-environment lib32-glibc libx11 libxtst p7zip pango patch unzip xterm zip)
        #pacman -S "${BASE_PKGS[@]}" --needed --noconfirm 
        for pkg in "${BASE_PKGS[@]}"; do sudo pacman -S "${pkg}" --overwrite \* --noconfirm 2>/dev/null; done
       #Main Package
        yay -S "ghidra" --noconfirm
        command -v "ghidra" >/dev/null 2>&1 || exit 1
        mv -fv "$(which ghidra)" "/usr/bin/ghidra-bin"
        echo '#!/bin/sh' > "/usr/bin/ghidra"
        echo '/usr/bin/ghidra-bin "$@"' >> "/usr/bin/ghidra"
        echo 'sleep inf' >> "/usr/bin/ghidra"
        chmod -v 'a+x' "/usr/bin/ghidra"
       #Debloat & Shrink
        yay -Ql "ghidra"
        sudo pacman -Rsn base-devel --noconfirm 2>/dev/null
        sudo pacman -Rsn perl --noconfirm 2>/dev/null
        sudo pacman -Rsn python --noconfirm 2>/dev/null
        sudo pacman -Scc --noconfirm ; yay -Scc --noconfirm
        #rim-shrink --all
        sudo rim-shrink --back --docs --locales --pkgcache --pycache --strip
       #Config
        echo 'RIM_AUTORUN="${RIM_AUTORUN:=ghidra}"' > "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_QUIET_MODE="${RIM_QUIET_MODE:=1}"' >> "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_CMPRS_LVL="${RIM_CMPRS_LVL:=22}"' >> "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_CMPRS_BSIZE="${RIM_CMPRS_BSIZE:=24}"' >> "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_SHARE_ICONS="${RIM_SHARE_ICONS:=1}"' >> "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_SHARE_FONTS="${RIM_SHARE_FONTS:=1}"' >> "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_SHARE_THEMES="${RIM_SHARE_THEMES:=1}"' >> "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_UPDATE_SHRINK="${RIM_UPDATE_SHRINK:=1}"' >> "${RUNDIR}/config/Run.rcfg"
        echo 'RIM_SYS_NVLIBS="${RIM_SYS_NVLIBS:=1}"' >> "${RUNDIR}/config/Run.rcfg"
       #Rebuild [Dwarfs ZSTD 22]
        rim-build --bsize '24' --clvl '22' --dwfs "${SBUILD_OUTDIR}/${PKG}"
      }
     export -f build_image
    #Build 
     RIM_NO_NVIDIA_CHECK="1" RIM_OVERFS_MODE="1" RIM_UNSHARE_USERS="1" \
     "${SBUILD_TMPDIR}/runimage" bash -c "build_image"
     [[ -s "${SBUILD_OUTDIR}/${PKG}" && ! -d "${SBUILD_OUTDIR}/${PKG}" ]] || { echo "[-] FATAL: ${SBUILD_OUTDIR}/${PKG} is Missing/Empty" >&2; exit 1; }
    #Extract Metadata
     "${SBUILD_OUTDIR}/${PKG}" rim-dinteg --list
     HOME="${SBUILD_TMPDIR}/integ_files" "${SBUILD_OUTDIR}/${PKG}" rim-dinteg --verbose --add "ghidra.*"
    #Desktop
     if [[ ! -s "${SBUILD_OUTDIR}/${PKG}.desktop" ]]; then
       find -L "${SBUILD_TMPDIR}/integ_files" -name "*.desktop" -printf "%s %p\n" -quit | sort -n | awk 'NR==1 {print $2}' | xargs -I "{}" sh -c 'cp -fv "{}" "${SBUILD_OUTDIR}/${PKG}.desktop"'
     fi
     sed '/.*DBusActivatable.*/I d' -i "${SBUILD_OUTDIR}/${PKG}.desktop"
     sed -E 's/\s+setup\s+/ /Ig' -i "${SBUILD_OUTDIR}/${PKG}.desktop"
     sed "s/Icon=[^ ]*/Icon=${PKG}/" -i "${SBUILD_OUTDIR}/${PKG}.desktop"
    #Icon
     if [[ ! -s "${SBUILD_OUTDIR}/${PKG}.png" && ! -s "${SBUILD_OUTDIR}/${PKG}.svg" ]]; then
       find -L "${SBUILD_TMPDIR}/integ_files" -type f,l  -regex '.*\.\(png\|svg\)' \
        -not -regex '.*\(favicon\|/\(16x16\|22x22\|24x24\|32x32\|36x36\|48x48\|64x64\|72x72\|96x96\)/\).*' \
        | awk '{print length, $0}' | sort -n | awk 'NR==1 {print $2}' | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/${PKG}.png"
       if [[ ! -f "${SBUILD_OUTDIR}/${PKG}.png" || $(stat -c%s "${SBUILD_OUTDIR}/${PKG}.png") -le 3 ]]; then
        find -L "${SBUILD_TMPDIR}/integ_files" -regex ".*\(128x128/apps\|256x256\)/.*${PKG}.*\.\(png\|svg\)" -printf "%s %p\n" -quit | sort -n | awk 'NR==1 {print $2}' | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/${PKG}.png"
       fi
       cp -fv "${SBUILD_OUTDIR}/${PKG}.png" "${SBUILD_OUTDIR}/.DirIcon"
     fi